#!/bin/sh /etc/rc.common
# Copyright (C) 2018-2023 honwen <https://github.com/honwen>

START=69
NAME=dnsmasq-extra
EXTRA_COMMANDS="rules update"

DNSMASQ_SOA=""
DATA=/etc/${NAME}.d
TARGET=/var/dnsmasq.d
_CURL='curl -H referer:github.com --retry 3 --connect-timeout 6 --max-time 55 -ksSL'

uci_get_by_type() {
	local ret=$(uci get $1.@$2[0].$3 2>/dev/null)
	echo ${ret:=$4}
}

uci_bool_by_type() {
	case "$(uci_get_by_type $1 $2 $3)" in
	1 | on | true | yes | enabled) return 0 ;;
	esac
	return 1
}

auto_cat() {
	for it in "$@"; do
		file="${DATA}/${it}"
		if [ -f "${file}.gz" ]; then
			(zcat "${file}.gz" 2>/dev/null) || (gunzip -ck "${file}.gz" 2>/dev/null) || (cat "${file}.gz" | gunzip -c)
		elif [ -f "${file}" ]; then
			cat "${file}"
		fi
	done
}

start() {
	uci_bool_by_type ${NAME} general enable || exit 0
	echo -en "Geneareting : $NAME\n    "
	mkdir -p ${TARGET}

	x_watchdog=$(sed -n "s/'//g;s/^WATCHDOG_ENDPOINT=//p" /etc/init.d/shadowsocks* /etc/init.d/xray* /etc/init.d/ssr* 2>/dev/null | sort -u)

	# plugins
	for plugin in $(uci_get_by_type ${NAME} general plugins); do
		[ -x /usr/bin/${plugin} ] || [ "V${plugin}" = "Vss-tunnel" -a -x /usr/bin/sslocal ] && {
			if echo ${plugin} | grep -q 'tunnel'; then
				plugin_alias=$(echo -n ${plugin} | sed 's/ss/shadowsocks/g; s/-tunnel//g')
				plugin_srv=$(uci_get_by_type ${plugin_alias} port_forward server nil)
				[ "V${plugin_srv}" = "Vnil" ] && continue
				plugin_port=$(uci_get_by_type ${plugin_alias} port_forward local_port 5300)
			else
				plugin_port=$(uci_get_by_type ${plugin} ${plugin} port 0000)
				[ "V${port_forward}" = "V0000" ] && continue
			fi
			echo -n "plugin:${plugin}, " | tr [a-z] [A-Z]
			auto_cat 'gfwlist' 'tldn' | sed "s/^/server=\//;s/$/\/127.0.0.1#${plugin_port}/" >${TARGET}/plugin_${plugin}.conf
			for it in $x_watchdog; do
				echo "server=/${it}/127.0.0.1#${plugin_port}" >>${TARGET}/plugin_${plugin}.conf
			done
		}
	done

	# pluginsOtcp
	for plugin in $(uci_get_by_type ${NAME} general pluginsOtcp); do
		[ -x /usr/bin/${plugin} ] || [ "V${plugin}" = "Vss-tunnel" -a -x /usr/bin/sslocal ] && {
			if echo ${plugin} | grep -qe 'ray\|tunnel'; then
				plugin_alias=$(echo -n ${plugin} | sed 's/ss/shadowsocks/g; s/-tunnel//g')
				plugin_srv=$(uci_get_by_type ${plugin_alias} port_forward server nil)
				plugin_enable=$(uci_get_by_type ${plugin_alias} port_forward 'enable' 0)
				[ "V${plugin_srv}" = "Vnil" -a "V${plugin_enable}" = "V0" ] && continue
				plugin_port=$(uci_get_by_type ${plugin_alias} port_forward local_port 5300)

			else
				plugin_port=$(uci_get_by_type ${plugin} ${plugin} port 0000)
				[ "V${port_forward}" = "V0000" ] && continue
			fi

			plugin_tcpport=$((plugin_port + 1))
			(/usr/bin/dnsFtcp -p $plugin_tcpport -s 127.0.0.1:$plugin_port >/dev/null 2>&1) &

			echo -n "plugin-tcp:${plugin}, " | tr [a-z] [A-Z]
			auto_cat 'gfwlist' 'tldn' | sed "s/^/server=\//;s/$/\/127.0.0.1#${plugin_tcpport}/" >${TARGET}/plugin_${plugin}.conf
			for it in $x_watchdog; do
				echo "server=/${it}/127.0.0.1#${plugin_tcpport}" >>${TARGET}/plugin_${plugin}.conf
			done
		}
	done

	# clean_server
	local tcpport=8300
	for server in $(uci_get_by_type ${NAME} general clean_server); do
		tcpport=$((tcpport + 1))
		(/usr/bin/dnsFtcp -p $tcpport -s ${server}:53 >/dev/null 2>&1) &

		echo -n "CLEAN-DNS:${server}, "
		auto_cat 'gfwlist' 'tldn' | sed "s/^/server=\//;s/$/\/${server}/" >${TARGET}/clean_${server}.conf

		echo -n "CLEAN-DNS-TCP:${server}, "
		auto_cat 'gfwlist' 'tldn' | sed "s/^/server=\//;s/$/\/127.0.0.1#${tcpport}/" >>${TARGET}/clean_${server}.conf

		for it in $x_watchdog; do
			echo "server=/${it}/${server}" >>${TARGET}/plugin_${plugin}.conf
			echo "server=/${it}/127.0.0.1#${tcpport}" >>${TARGET}/plugin_${plugin}.conf
		done
	done

	[ 0 -lt $(sed -n '/wan_bp_list/p' /etc/config/shadowsocks* /etc/config/xray* /etc/config/ssr* 2>/dev/null | grep -c 'chnroute') ] &&
		echo -n "IPSET:*_spec_dst_bp for chnroute, " && {
		auto_cat 'direct' | sed "s/^/ipset=\//;s/$/\/ss_spec_dst_bp/" >${TARGET}/ipset_direct.conf
		auto_cat 'direct' | sed "s/^/ipset=\//;s/$/\/ssr_spec_dst_bp/" >>${TARGET}/ipset_direct.conf
		auto_cat 'direct' | sed "s/^/ipset=\//;s/$/\/xray_spec_dst_bp/" >>${TARGET}/ipset_direct.conf
		auto_cat 'direct' | sed "s/^/server=\//;s/$/\/#/" >>${TARGET}/ipset_direct.conf
		echo 'ipset=/cloudflare-dns.com/ss_spec_dst_sp' >>${TARGET}/ipset_direct.conf
		echo 'ipset=/cloudflare-dns.com/ssr_spec_dst_sp' >>${TARGET}/ipset_direct.conf
		echo 'ipset=/cloudflare-dns.com/xray_spec_dst_bp' >>${TARGET}/ipset_direct.conf
		uci_get_by_type ${NAME} general clean_server | sed "s/^/ipset=\//;s/$/\/ss_spec_dst_bp/" >>${TARGET}/ipset_direct.conf
		uci_get_by_type ${NAME} general clean_server | sed "s/^/ipset=\//;s/$/\/ssr_spec_dst_bp/" >>${TARGET}/ipset_direct.conf
		uci_get_by_type ${NAME} general clean_server | sed "s/^/ipset=\//;s/$/\/xray_spec_dst_bp/" >>${TARGET}/ipset_direct.conf
	}

	if [ 0 -lt $(sed -n '/wan_bp_list/p' /etc/config/shadowsocks* /etc/config/xray* /etc/config/ssr* 2>/dev/null | grep -c 'flag_gfwlist') ]; then
		echo -n "IPSET:gfwlist, "
		auto_cat 'gfwlist' | sed "s/^/ipset=\//;s/$/\/gfwlist/" >${TARGET}/ipset_gfwlist.conf

		ipset -X gfwlist 2>/dev/null
		ipset -! -R <<-EOF 2>/dev/null
			create gfwlist hash:net hashsize 128
			flush gfwlist
			add gfwlist 1.0.0.1
			add gfwlist 8.8.4.4
			add gfwlist 9.9.9.0/28
			add gfwlist 208.67.220.220/22
			add gfwlist 31.13.64.0/18
			add gfwlist 50.22.192.0/18
			add gfwlist 50.23.64.0/18
			add gfwlist 50.97.0.0/18
			add gfwlist 75.126.0.0/18
			add gfwlist 91.105.192.0/23
			add gfwlist 91.108.0.0/18
			add gfwlist 95.161.64.0/20
			add gfwlist 108.168.128.0/17
			add gfwlist 109.239.128.0/18
			add gfwlist 149.154.128.0/18
			add gfwlist 149.154.160.0/20
			add gfwlist 157.240.0.0/18
			add gfwlist 158.85.0.0/18
			add gfwlist 158.85.192.0/18
			add gfwlist 169.44.0.0/17
			add gfwlist 169.44.128.0/18
			add gfwlist 169.45.64.0/18
			add gfwlist 169.45.128.0/17
			add gfwlist 169.46.0.0/17
			add gfwlist 169.47.0.0/18
			add gfwlist 169.47.128.0/17
			add gfwlist 169.53.0.0/17
			add gfwlist 169.53.192.0/18
			add gfwlist 169.54.0.0/18
			add gfwlist 169.54.192.0/18
			add gfwlist 169.55.64.0/18
			add gfwlist 169.55.192.0/18
			add gfwlist 173.192.128.0/17
			add gfwlist 173.193.192.0/18
			add gfwlist 174.36.192.0/18
			add gfwlist 174.37.192.0/18
			add gfwlist 179.60.192.0/18
			add gfwlist 184.173.128.0/18
			add gfwlist 185.60.192.0/18
			add gfwlist 185.76.151.0/24
			add gfwlist 192.155.192.0/18
			add gfwlist 198.11.192.0/18
			add gfwlist 198.23.64.0/18
			$(auto_cat 'gfwlist' | head -n100 | sed -nr 's/([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\nadd gfwlist \1/;s/^.*\n//p')
		EOF
	fi

	uci_bool_by_type ${NAME} general adblock && {
		echo -n "ADBLOCK, "
		auto_cat 'adblock' | sed "s/^/address=\//;s/$/\/${DNSMASQ_SOA}/" >${TARGET}/misc_adblock.conf
	}

	echo -n "CUSTOM" && {
		echo "all-servers" >${TARGET}/misc_custom.conf
		echo "conf-file=${DATA}/custom.conf" >>${TARGET}/misc_custom.conf

		# https://github.com/coolsnowwolf/lede/tree/master/package/network/services/dnsmasq/patches
		for filter in $(uci_get_by_type ${NAME} general filters); do
			dnsmasq --help | grep -q "filter-${filter}" && {
				echo "filter-${filter}" >>${TARGET}/misc_custom.conf
			}
		done

		uci_bool_by_type ${NAME} general overwrite_resolve && {
			_tmp_list="/tmp/.custom.$(date '+%s').list"
			sed -n 's+#$++p' ${TARGET}/*.conf >$_tmp_list

			sed "/\/#$/d" -i ${TARGET}/*.conf

			uci_bool_by_type ${NAME} general overwrite_aiodns && {
				[ -x /usr/bin/aiodns ] && {
					local aiodns_port=$(uci_get_by_type aiodns aiodns port 7100)
					for it in $x_watchdog; do
						echo "server=/${it}/127.0.0.1#${aiodns_port}" >>${TARGET}/misc_custom
					done
					echo "server=127.0.0.1#$aiodns_port" >>${TARGET}/misc_custom.conf
					sed "s+$+127.0.0.1#$aiodns_port+g" $_tmp_list >>${TARGET}/misc_direct.conf
				}
			}

			uci_bool_by_type ${NAME} general overwrite_dcompass && {
				[ -x /usr/bin/dcompass ] && {
					local dcompass_port=$(uci_get_by_type dcompass dcompass port 7500)
					for it in $x_watchdog; do
						echo "server=/${it}/127.0.0.1#${dcompass_port}" >>${TARGET}/misc_custom
					done
					echo "server=127.0.0.1#$dcompass_port" >>${TARGET}/misc_custom.conf
					sed "s+$+127.0.0.1#$dcompass_port+g" $_tmp_list >>${TARGET}/misc_direct.conf
				}
			}

			uci_bool_by_type ${NAME} general overwrite_smartdns && {
				[ -x /usr/bin/smartdns ] && {
					pgrep -f 'smartdns.cn.conf' >/dev/null || {
						sed 's+\(enable_cn[ \t]*\)[^ ]*$+\1yes+g' -i /etc/config/smartdns
						/etc/init.d/smartdns restart >/dev/null 2>&1
					}
					local smartdns_port=$(uci_get_by_type smartdns smartdns port 0000)
					echo "server=127.0.0.1#$((smartdns_port + 1))" >>${TARGET}/misc_custom.conf
					sed "s+$+127.0.0.1#$((smartdns_port + 1))+g" $_tmp_list >>${TARGET}/misc_direct.conf
				}
			}

			uci_bool_by_type ${NAME} general overwrite_dnsproxy && {
				[ -x /usr/bin/dnsproxy ] && {
					local dnsproxy_port=$(uci_get_by_type dnsproxy dnsproxy port_cn 0000)
					pgrep -f "\-p $dnsproxy_port" >/dev/null || {
						sed 's+\(enable_cn[ \t]*\)[^ ]*$+\1yes+g' -i /etc/config/dnsproxy
						/etc/init.d/dnsproxy restart >/dev/null 2>&1
					}
					echo "server=127.0.0.1#$dnsproxy_port" >>${TARGET}/misc_custom.conf
					sed "s+$+127.0.0.1#$dnsproxy_port+g" $_tmp_list >>${TARGET}/misc_direct.conf
				}
			}

			local tcpport=8200
			for server in $(uci_get_by_type ${NAME} general overwrite_tcp_ns); do
				tcpport=$((tcpport + 1))
				(/usr/bin/dnsFtcp -p $tcpport -s ${server} >/dev/null 2>&1) &
				echo "server=127.0.0.1#${tcpport}" >>${TARGET}/misc_custom.conf
				sed "s+$+127.0.0.1#$tcpport+g" $_tmp_list >>${TARGET}/misc_direct.conf
			done

			echo -n ", OVERWRITE-RESOLVE" && echo 'no-resolv' >>${TARGET}/misc_custom.conf
			echo "$(sort -u ${TARGET}/misc_direct.conf)" >${TARGET}/misc_direct.conf
			rm -f /tmp/.custom.*.list
		}
	}

	sed '/\/\//d; /[0-9]\/[0-9]/d' -i ${TARGET}/*

	(/etc/init.d/dnsmasq restart >/dev/null 2>&1) && rules
	# (/etc/init.d/dnsmasq reload >/dev/null 2>&1) && rules
	echo " ."
}

cleanup() {
	ipset -F gfwlist 2>/dev/null
	ipset -X gfwlist 2>/dev/null

	echo -n "Stopping $NAME"
	rm -rf ${TARGET}/misc_*.conf 2>/dev/null
	rm -rf ${TARGET}/ipset_*.conf 2>/dev/null
	rm -rf ${TARGET}/plugin_*.conf 2>/dev/null
	rm -rf ${TARGET}/clean*.conf 2>/dev/null
	rm -rf ${TARGET}/*-tcp_*.conf 2>/dev/null

	kill -9 $(pgrep -f /usr/bin/dnsFtcp) >/dev/null 2>&1
	[ -f /etc/config/smartdns ] && /etc/init.d/smartdns restart >/dev/null 2>&1
	echo " ."
}

stop() {
	cleanup
	/etc/init.d/dnsmasq restart >/dev/null 2>&1
	rules
	echo " ."
}

restart() {
	echo "Restarting $NAME... "
	cleanup
	sleep 1
	start
}

update() {
	baseurl="https://raw.githubusercontent.com/honwen/openwrt-${NAME}/master/${NAME}/files"

	if ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+ghp.ci/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+ghp.ci/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.com/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.com/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.net/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.net/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.cc/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.cc/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.cn/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.cn/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+gitdl.cn/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+gitdl.cn/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+githubusercontent+githubusercontents+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+githubusercontent+githubusercontents+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent.com+cdn.staticaly.com/gh+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent.com+cdn.staticaly.com/gh+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+githubusercontent.com+fastgit.org+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+githubusercontent.com+fastgit.org+g')"
	fi
	echo "# SRC: $baseurl"

	# update_chn
	update_sub 'chnroute.txt' "$baseurl"
	if [ -L "/etc/${NAME}.d/gfwlist.gz" ]; then
		update_sub 'gfwlist.lite.gz' "$baseurl"
	else
		update_sub 'gfwlist.gz' "$baseurl"
	fi
	update_sub 'direct.gz' "$baseurl"
	update_others "$baseurl"
}

update_others() {
	baseurl="$1"
	overlay_free=$(df -k | grep -E '^overlay' | awk '{print $4}')
	# only update data: adblock/tldn when disk free > 1MiB
	[ "Z$overlay_free" = "Z" ] && return 0
	[ $overlay_free -lt 1024 ] && return 0

	update_sub 'tldn.gz' "$baseurl"

	if [ -L "/etc/${NAME}.d/adblock.gz" ]; then
		update_sub 'adblock.lite.gz' "$baseurl"
	else
		update_sub 'adblock.gz' "$baseurl"
	fi
}

update_sub() {
	sub=$1
	file="/etc/${NAME}.d/${sub}"
	ts=$(date '+%s')
	src="${2:-"https://raw.githubusercontent.com/honwen/openwrt-${NAME}/master/${NAME}/files"}/data/${sub}"

	newHash=$(${_CURL} "${src}.md5sum?${ts}" | sed 's/ .*//g')
	[ -e $file ] && {
		oldHash=$(md5sum ${file} 2>/dev/null | sed 's/ .*//g')
		# echo $oldHash $newHash

		[ "Z$oldHash" = "Z" -o "Z$newHash" = "Z" ] && return 1
		[ "$oldHash" = "$newHash" ] && echo "# $file NOT Needed Updated" && return 0

		bak="/tmp/${sub}.backup"
		cp -f "${file}" "${bak}"
	}

	$(echo "${_CURL}" | sed 's|max-time[ 0-9]*|max-time 150 |g') "${src}?${ts}" -o ${file}
	oldHash=$(md5sum "${file}" 2>/dev/null | sed 's/ .*//g')
	[ "Z$oldHash" = "Z$newHash" ] && {
		echo "# ${file} Updated"
		rm -f "${bak}"
		return 0
	}

	echo "# $file is broken, failsafe Now!"
	rm -f "${file}"
	cp -f "${bak}" "${file}" || cp -f "/rom${file}" "${file}"
	rm -f "${bak}"
}

update_chn() {
	chnroute=/etc/${NAME}.d/chnroute.txt
	cp -f $chnroute /tmp/chnroute.txt.bak

	ts=$(date '+%s')
	# chnsrc="https://raw.githubusercontents.com/17mon/china_ip_list/master/china_ip_list.txt"
	chnsrc="https://ispip.clang.cn/all_cn_cidr.txt"
	# chnsrc="https://raw.githubusercontents.com/gaoyifan/china-operator-ip/ip-lists/china.txt"

	echo "# $chnroute Updating"
	curl --retry 3 --connect-timeout 10 --max-time 120 -ksSL $chnsrc -o $chnroute
	if [ $? -eq 0 ]; then
		echo "# $chnroute Updated"
	else
		echo "# $chnroute NOT Updated"
	fi

	if [ $(cat $chnroute 2>&1 | grep -cE '^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]\/[0-9]*$') -lt 2048 ]; then
		echo "# $chnroute is broken, rollback Now!"
		rm -f "$chnroute"
		cp -f /tmp/chnroute.txt.bak "$chnroute"
	fi

	if [ $(cat $chnroute 2>&1 | grep -cE '^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]\/[0-9]*$') -lt 2048 ]; then
		echo "# $chnroute is broken, failsafe Now!"
		rm -f "$chnroute"
		cp -f "/rom$chnroute" "$chnroute"
	fi

	rm -f /tmp/chnroute.txt.bak
}

rules() {
	while iptables -t nat -D PREROUTING -p udp --dport 53 -j REDIRECT --to 53 2>/dev/null; do :; done
	while iptables -t mangle -D PREROUTING -p udp --dport 53 -j RETURN 2>/dev/null; do :; done
	while iptables -t nat -D PREROUTING -p tcp --dport 53 -j REDIRECT --to 53 2>/dev/null; do :; done
	while iptables -t mangle -D PREROUTING -p tcp --dport 53 -j RETURN 2>/dev/null; do :; done

	[ -f ${TARGET}/misc_custom.conf ] || exit 0

	iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to 53
	iptables -t mangle -I PREROUTING -p udp --dport 53 -j RETURN
	iptables -t nat -I PREROUTING -p tcp --dport 53 -j REDIRECT --to 53
	iptables -t mangle -I PREROUTING -p tcp --dport 53 -j RETURN
}
