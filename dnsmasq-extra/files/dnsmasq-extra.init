#!/bin/sh /etc/rc.common
# Copyright (C) 2018-2025 honwen <https://github.com/honwen>

START=69
NAME=dnsmasq-extra
EXTRA_COMMANDS="rules update homeproxy"

DNSMASQ_SOA=""
DATA=/etc/${NAME}.d
# we don't know which is the default server, just take the first one
DNSMASQ_UCI_CONFIG="$(uci -q show "dhcp.@dnsmasq[0]" | awk 'NR==1 {split($0, conf, /[.=]/); print conf[2]}')"
if [ -f "/tmp/etc/dnsmasq.conf.$DNSMASQ_UCI_CONFIG" ]; then
	TARGET="$(awk -F '=' '/^conf-dir=/ {print $2}' "/tmp/etc/dnsmasq.conf.$DNSMASQ_UCI_CONFIG")/dnsmasq-extra.d"
else
	TARGET="/tmp/dnsmasq.d/dnsmasq-extra.d"
fi

_CURL='curl -H referer:github.com --retry 3 --connect-timeout 6 --max-time 55 -ksSL'

uci_get_by_type() {
	local ret=$(uci get $1.@$2[0].$3 2>/dev/null)
	echo ${ret:=$4}
}

uci_bool_by_type() {
	case "$(uci_get_by_type $1 $2 $3)" in
	1 | on | true | yes | enabled) return 0 ;;
	esac
	return 1
}

auto_cat() {
	for it in "$@"; do
		if [ -e $it ]; then
			file="${it}"
		else
			file="${DATA}/${it}"
		fi
		if [ -f "${file}.gz" ]; then
			(zcat "${file}.gz" 2>/dev/null) || (gunzip -ck "${file}.gz" 2>/dev/null) || (cat "${file}.gz" | gunzip -c)
		elif [ -f "${file}" ]; then
			cat "${file}"
		fi
	done
}

start() {
	uci_bool_by_type ${NAME} general enable || exit 0
	echo -en "Geneareting : $NAME\n    "
	mkdir -p "$TARGET"
	echo -e "conf-dir=$TARGET" >"$TARGET/../dnsmasq-extra.conf"
	cp -f /etc/dnsmasq-extra.d/*.conf ${TARGET}/

	# plugins
	for plugin in $(uci_get_by_type ${NAME} general plugins); do
		[ -x /usr/bin/${plugin} ] && {
			plugin_port=$(uci_get_by_type ${plugin} ${plugin} port 0000)
			[ "V${port_forward}" = "V0000" ] && continue
			echo -n "plugin:${plugin}, " | tr [a-z] [A-Z]
			auto_cat 'gfwlist' 'tldn' /etc/homeproxy/resources/proxy_list.txt |
				sed "s/^/server=\//;s/$/\/127.0.0.1#${plugin_port}/" >${TARGET}/plugin_${plugin}.conf
		}
	done

	x_direct=$( (
		uci_get_by_type ${NAME} general direct_domains | sed 's+  *+\n+g'
		uci show homeproxy | sed -n 's+.*\.address=++p'
	) 2>/dev/null | tr -d "'" | sort -u)

	# pluginsOtcp
	for plugin in $(uci_get_by_type ${NAME} general pluginsOtcp); do
		[ -x /usr/bin/${plugin} ] && {

			plugin_port=$(uci_get_by_type ${plugin} ${plugin} port 0000)
			[ "V${port_forward}" = "V0000" ] && continue

			plugin_tcpport=$((plugin_port + 1))
			(/usr/bin/dnsFtcp -p $plugin_tcpport -s 127.0.0.1:$plugin_port >/dev/null 2>&1) &

			echo -n "plugin-tcp:${plugin}, " | tr [a-z] [A-Z]
			auto_cat 'gfwlist' 'tldn' /etc/homeproxy/resources/proxy_list.txt |
				sed "s/^/server=\//;s/$/\/127.0.0.1#${plugin_tcpport}/" >${TARGET}/plugin_${plugin}.conf
			for it in $x_direct; do
				echo "server=/${it}/127.0.0.1#${plugin_tcpport}" >>${TARGET}/plugin_${plugin}.conf
			done
		}
	done

	# clean_server
	local tcpport=8300
	for server in $(uci_get_by_type ${NAME} general clean_server); do
		tcpport=$((tcpport + 1))
		(/usr/bin/dnsFtcp -p $tcpport -s ${server}:53 >/dev/null 2>&1) &

		echo -n "CLEAN-DNS:${server}, "
		auto_cat 'gfwlist' 'tldn' /etc/homeproxy/resources/proxy_list.txt |
			sed "s/^/server=\//;s/$/\/${server}/" >${TARGET}/clean_${server}.conf

		echo -n "CLEAN-DNS-TCP:${server}, "
		auto_cat 'gfwlist' 'tldn' /etc/homeproxy/resources/proxy_list.txt |
			sed "s/^/server=\//;s/$/\/127.0.0.1#${tcpport}/" >>${TARGET}/clean_${server}.conf

		for it in $x_direct; do
			echo "server=/${it}/${server}" >>${TARGET}/plugin_${plugin}.conf
			echo "server=/${it}/127.0.0.1#${tcpport}" >>${TARGET}/plugin_${plugin}.conf
		done
	done

	uci_bool_by_type ${NAME} general adblock && {
		echo -n "ADBLOCK, "
		auto_cat 'adblock' | sed "s/^/address=\//;s/$/\/${DNSMASQ_SOA}/" >${TARGET}/misc_adblock.conf
	}

	echo -n "DIRECT, " && {
		auto_cat 'direct' | sed "s/^/server=\//;s/$/\/#/" >${TARGET}/misc_direct.conf
	}

	echo -n "CUSTOM" && {
		echo "all-servers" >${TARGET}/misc_custom.conf

		# https://github.com/coolsnowwolf/lede/tree/master/package/network/services/dnsmasq/patches
		for filter in $(uci_get_by_type ${NAME} general filters); do
			dnsmasq --help | grep -q "filter-${filter}" && {
				echo "filter-${filter}" >>${TARGET}/misc_custom.conf
			}
		done

		uci_bool_by_type ${NAME} general overwrite_resolve && {
			_tmp_list="/tmp/.custom.$(date '+%s').list"
			sed -n 's+#$++p' ${TARGET}/*.conf >$_tmp_list

			sed "/\/#$/d" -i ${TARGET}/*.conf

			uci_bool_by_type ${NAME} general overwrite_aiodns && {
				[ -x /usr/bin/aiodns ] && {
					local aiodns_port=$(uci_get_by_type aiodns aiodns port 7100)
					for it in $x_direct; do
						echo "server=/${it}/127.0.0.1#${aiodns_port}" >>${TARGET}/misc_custom.conf
					done
					echo "server=127.0.0.1#$aiodns_port" >>${TARGET}/misc_custom.conf
					sed "s+$+127.0.0.1#$aiodns_port+g" $_tmp_list >>${TARGET}/misc_direct.conf
				}
			}

			uci_bool_by_type ${NAME} general overwrite_dcompass && {
				[ -x /usr/bin/dcompass ] && {
					local dcompass_port=$(uci_get_by_type dcompass dcompass port 7500)
					for it in $x_direct; do
						echo "server=/${it}/127.0.0.1#${dcompass_port}" >>${TARGET}/misc_custom.conf
					done
					echo "server=127.0.0.1#$dcompass_port" >>${TARGET}/misc_custom.conf
					sed "s+$+127.0.0.1#$dcompass_port+g" $_tmp_list >>${TARGET}/misc_direct.conf
				}
			}

			uci_bool_by_type ${NAME} general overwrite_smartdns && {
				[ -x /usr/bin/smartdns ] && {
					pgrep -f 'smartdns.cn.conf' >/dev/null || {
						sed 's+\(enable_cn[ \t]*\)[^ ]*$+\1yes+g' -i /etc/config/smartdns
						/etc/init.d/smartdns restart >/dev/null 2>&1
					}
					local smartdns_port=$(($(uci_get_by_type smartdns smartdns port 0000) + 1))
					for it in $x_direct; do
						echo "server=/${it}/127.0.0.1#${smartdns_port}" >>${TARGET}/misc_custom.conf
					done
					echo "server=127.0.0.1#$smartdns_port" >>${TARGET}/misc_custom.conf
					sed "s+$+127.0.0.1#$smartdns_port+g" $_tmp_list >>${TARGET}/misc_direct.conf
				}
			}

			uci_bool_by_type ${NAME} general overwrite_dnsproxy && {
				[ -x /usr/bin/dnsproxy ] && {
					local dnsproxy_port=$(uci_get_by_type dnsproxy dnsproxy port_cn 0000)
					pgrep -f "\-p $dnsproxy_port" >/dev/null || {
						sed 's+\(enable_cn[ \t]*\)[^ ]*$+\1yes+g' -i /etc/config/dnsproxy
						/etc/init.d/dnsproxy restart >/dev/null 2>&1
					}
					echo "server=127.0.0.1#$dnsproxy_port" >>${TARGET}/misc_custom.conf
					sed "s+$+127.0.0.1#$dnsproxy_port+g" $_tmp_list >>${TARGET}/misc_direct.conf
				}
			}

			local tcpport=8200
			for server in $(uci_get_by_type ${NAME} general overwrite_tcp_ns); do
				tcpport=$((tcpport + 1))
				(/usr/bin/dnsFtcp -p $tcpport -s ${server} >/dev/null 2>&1) &
				echo "server=127.0.0.1#${tcpport}" >>${TARGET}/misc_custom.conf
				sed "s+$+127.0.0.1#$tcpport+g" $_tmp_list >>${TARGET}/misc_direct.conf
			done

			echo -n ", OVERWRITE-RESOLVE" && echo 'no-resolv' >>${TARGET}/misc_custom.conf
			echo "$(sort -u ${TARGET}/misc_direct.conf)" >${TARGET}/misc_direct.conf
			rm -f /tmp/.custom.*.list
		}
	}

	echo "$(sort -u ${TARGET}/misc_custom.conf)" >${TARGET}/misc_custom.conf

	sed '/\/\//d; /[0-9]\/[0-9]/d' -i ${TARGET}/*

	(/etc/init.d/dnsmasq restart >/dev/null 2>&1) && rules
	# (/etc/init.d/dnsmasq reload >/dev/null 2>&1) && rules
	echo " ."
}

cleanup() {
	echo -n "Stopping $NAME"
	rm -rf "$TARGET/../dnsmasq-extra.conf" "$TARGET" 2>/dev/null

	kill -9 $(pgrep -f /usr/bin/dnsFtcp) >/dev/null 2>&1
	[ -f /etc/config/smartdns ] && /etc/init.d/smartdns restart >/dev/null 2>&1
	echo " ."
}

stop() {
	cleanup
	/etc/init.d/dnsmasq restart >/dev/null 2>&1
	rules
	echo " ."
}

restart() {
	echo "Restarting $NAME... "
	cleanup
	sleep 1
	start
}

update() {
	baseurl="https://raw.githubusercontent.com/honwen/openwrt-${NAME}/master/${NAME}/files"

	# https://github.com/XIU2/UserScript/blob/master/GithubEnhanced-High-Speed-Download.user.js
	if ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.cn/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.cn/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+cdn.wget.la/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+cdn.wget.la/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+wget.la/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+wget.la/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+github.geekery.cn/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+github.geekery.cn/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.net/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.net/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.cc/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+ghproxy.cc/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent+cf.ghproxy.cc/https://raw.githubusercontent+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent+cf.ghproxy.cc/https://raw.githubusercontent+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent.com+cdn.staticaly.com/gh+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent.com+cdn.staticaly.com/gh+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+raw.githubusercontent.com+jsd.proxy.aks.moe/gh+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+raw.githubusercontent.com+jsd.proxy.aks.moe/gh+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+githubusercontent.com+fastgit.org+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+githubusercontent.com+fastgit.org+g')"
	elif ${_CURL} "$(echo $baseurl | sed 's+githubusercontent.com+kkgithub.com+g')/dnsmasq-extra.conf" | grep -q 'plugins'; then
		baseurl="$(echo $baseurl | sed 's+githubusercontent.com+kkgithub.com+g')"
	fi
	echo "# SRC: $baseurl"

	# update_chn
	update_sub 'chnroute.txt' "$baseurl"
	if [ -L "/etc/${NAME}.d/gfwlist.gz" ]; then
		update_sub 'gfwlist.lite.gz' "$baseurl"
	else
		update_sub 'gfwlist.gz' "$baseurl"
	fi
	update_sub 'direct.gz' "$baseurl"
	update_others "$baseurl"
}

update_others() {
	baseurl="$1"
	overlay_free=$(df -k | grep -E '^overlay' | awk '{print $4}')
	# only update data: adblock/tldn when disk free > 1MiB
	[ "Z$overlay_free" = "Z" ] && return 0
	[ $overlay_free -lt 1024 ] && return 0

	update_sub 'tldn.gz' "$baseurl"

	if [ -L "/etc/${NAME}.d/adblock.gz" ]; then
		update_sub 'adblock.lite.gz' "$baseurl"
	else
		update_sub 'adblock.gz' "$baseurl"
	fi
}

update_sub() {
	sub=$1
	file="/etc/${NAME}.d/${sub}"
	ts=$(date '+%s')
	src="${2:-"https://raw.githubusercontent.com/honwen/openwrt-${NAME}/master/${NAME}/files"}/data/${sub}"

	newHash=$(${_CURL} "${src}.md5sum?${ts}" | sed 's/ .*//g')
	[ -e $file ] && {
		oldHash=$(md5sum ${file} 2>/dev/null | sed 's/ .*//g')
		# echo $oldHash $newHash

		[ "Z$oldHash" = "Z" -o "Z$newHash" = "Z" ] && return 1
		[ "$oldHash" = "$newHash" ] && echo "# $file NOT Needed Updated" && return 0

		bak="/tmp/${sub}.backup"
		cp -f "${file}" "${bak}"
	}

	$(echo "${_CURL}" | sed 's|max-time[ 0-9]*|max-time 150 |g') "${src}?${ts}" -o ${file}
	oldHash=$(md5sum "${file}" 2>/dev/null | sed 's/ .*//g')
	[ "Z$oldHash" = "Z$newHash" ] && {
		echo "# ${file} Updated"
		rm -f "${bak}"
		return 0
	}

	echo "# $file is broken, failsafe Now!"
	rm -f "${file}"
	cp -f "${bak}" "${file}" || cp -f "/rom${file}" "${file}"
	rm -f "${bak}"
}

update_chn() {
	chnroute=/etc/${NAME}.d/chnroute.txt
	cp -f $chnroute /tmp/chnroute.txt.bak

	ts=$(date '+%s')
	# chnsrc="https://raw.githubusercontents.com/17mon/china_ip_list/master/china_ip_list.txt"
	chnsrc="https://ispip.clang.cn/all_cn_cidr.txt"
	# chnsrc="https://raw.githubusercontents.com/gaoyifan/china-operator-ip/ip-lists/china.txt"

	echo "# $chnroute Updating"
	curl --retry 3 --connect-timeout 10 --max-time 120 -ksSL $chnsrc -o $chnroute
	if [ $? -eq 0 ]; then
		echo "# $chnroute Updated"
	else
		echo "# $chnroute NOT Updated"
	fi

	if [ $(cat $chnroute 2>&1 | grep -cE '^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]\/[0-9]*$') -lt 2048 ]; then
		echo "# $chnroute is broken, rollback Now!"
		rm -f "$chnroute"
		cp -f /tmp/chnroute.txt.bak "$chnroute"
	fi

	if [ $(cat $chnroute 2>&1 | grep -cE '^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]\/[0-9]*$') -lt 2048 ]; then
		echo "# $chnroute is broken, failsafe Now!"
		rm -f "$chnroute"
		cp -f "/rom$chnroute" "$chnroute"
	fi

	rm -f /tmp/chnroute.txt.bak
}

homeproxy() {
	HP_DIR="/etc/homeproxy"
	[ -x /etc/init.d/homeproxy ] || return 0
	[ -d "${HP_DIR}/resources" ] || return 0

	ln -sf /etc/dnsmasq-extra.d/chnroute.txt "${HP_DIR}/resources/china_ip4.txt"
	zcat /etc/dnsmasq-extra.d/gfwlist.gz >"${HP_DIR}/resources/gfw_list.txt"
	zcat /etc/dnsmasq-extra.d/direct.gz >"${HP_DIR}/resources/direct_list.txt"
	uci_get_by_type ${NAME} general direct_domains | sed 's+  *+\n+g' >>"${HP_DIR}/resources/direct_list.txt"
	sed '/^server=127/d' -i $TARGET/../dnsmasq-homeproxy.d/redirect-dns.conf 2>/dev/null || :
	# rm -f $TARGET/../dnsmasq-homeproxy.d/redirect-dns.conf

	# hiject homeproxy
	grep -qE 'dnsmasq-extra *homeproxy' /etc/init.d/homeproxy || {
		# sed '/start_service/a\\t/etc/init.d/dnsmasq-extra homeproxy || :' -i /etc/init.d/homeproxy
		sed '/dnsmasq *restart/i\\t\t/etc/init.d/dnsmasq-extra homeproxy || :' -i /etc/init.d/homeproxy
	}
	grep -qE 'dnsmasq-extra *homeproxy' /etc/homeproxy/scripts/update_resources.sh || {
		echo '/etc/init.d/dnsmasq-extra homeproxy || :' >>/etc/homeproxy/scripts/update_resources.sh
	}
	grep -qF "url: 'https://cp.cloudflare.com/'," /etc/homeproxy/scripts/generate_client.uc || {
		sed "/outbounds: map(main_urltest_nodes/i\\\t\t\turl: 'https://cp.cloudflare.com/'," -i /etc/homeproxy/scripts/generate_client.uc
	}
}

rules() {
	homeproxy || :

	if [ -n "$(command -v nft)" ]; then
		while nft delete table inet dnsmasq_extra 2>/dev/null; do :; done
	fi

	[ -f ${TARGET}/misc_custom.conf ] || exit 0

	if [ -n "$(command -v nft)" ]; then
		nft add table inet dnsmasq_extra
		nft add chain inet dnsmasq_extra prerouting "{ type nat hook prerouting priority -110; policy accept; }"
		nft add rule inet dnsmasq_extra prerouting "meta nfproto { ipv4, ipv6 } udp dport 53 counter redirect to :53 comment \"DNSMASQ HIJACK\""
	fi
}
