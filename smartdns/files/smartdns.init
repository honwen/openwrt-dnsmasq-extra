#!/bin/sh /etc/rc.common

START=90
NAME=smartdns
USE_PROCD=1
EXTRA_COMMANDS="healthcheck"

CRON_FILE=/etc/crontabs/root
LOG_DIR=/var/log/$NAME

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_bool_by_type() {
	case "$(uci_get_by_type $1 $2)" in
	1 | on | true | yes | enabled) return 0 ;;
	esac
	return 1
}

start_instance() {
	procd_open_instance
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param term_timeout 3
	procd_set_param nice -5
	procd_set_param limits nofile="65535 65535"
	[ -e /proc/sys/kernel/core_pattern ] && {
		procd_append_param limits core="unlimited"
	}
	procd_set_param command $@
	procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger $NAME
}

start_service() {
	uci_bool_by_type $NAME enable || exit 0
	add_cron
	add_hotplug

	mkdir -p /var/etc/ $(dirname ${LOG_DIR})

	port=$(uci_get_by_type $NAME port 7700)

	# -------------------- user --------------------
	if [ 1024 -lt $port ]; then
		if grep -q 'dnsmasq' /etc/shadow; then
			user='dnsmasq'
		elif grep -q 'nobody' /etc/shadow; then
			user='nobody'
		fi
	fi
	[ "V$user" = "V" ] && user='root'
	# -------------------- user --------------------

	echo "user $user" >"/var/etc/${NAME}.conf"
	uci_bool_by_type $NAME cache && cat <<-EOF >>"/var/etc/${NAME}.conf"
		cache-size 1024
		cache-file /tmp/smartdns.cache
		cache-checkpoint-time 600
		serve-expired yes
		prefetch-domain yes
	EOF

	cat <<-EOF >>"/var/etc/${NAME}.conf"
		cache-persist $(uci_bool_by_type $NAME cache && echo 'yes' || echo 'no')
		bind 0.0.0.0:${port}$(uci_bool_by_type $NAME cache || echo ' -no-cache')
		bind-tcp 0.0.0.0:${port}$(uci_bool_by_type $NAME cache || echo ' -no-cache')

		rr-ttl-min 120
		max-reply-ip-num 2
		rr-ttl-reply-max 600
		expand-ptr-from-address yes
		response-mode $(uci_get_by_type $NAME response_mode)
		speed-check-mode $(uci_get_by_type $NAME speed_check_mode)
		$(
			for it in $(uci_get_by_type $NAME extra_rules | sed "s+ +_+g; s+'_'+ +g; s+'++g"); do
				echo "domain-rules $it" | sed 's+_+ +g'
			done
		)

		dualstack-ip-selection $(uci_bool_by_type $NAME ipv6 && echo yes || echo no)
		force-AAAA-SOA $(uci_bool_by_type $NAME ipv6 && echo no || echo yes)
		force-qtype-SOA 65

		log-level info
		log-file ${LOG_DIR}/${NAME}.log
		log-size 256K
		log-num 3

		$(
			for cfg in address cname ignore_ip; do
				for it in $(uci_get_by_type $NAME $cfg); do
					echo "$cfg $it"
				done
				echo
			done
		)

		$(
			for it in $(uci_get_by_type $NAME bootstrap); do
				echo "server ${it} -bootstrap-dns"
				echo ${it} | grep -qE '^223\.' || {
					echo "server-tcp ${it} -bootstrap-dns"
				}
			done
		)

		$(
			for type in tls https; do
				for it in $(uci_get_by_type $NAME server_${type}); do
					echo -n "server-${type} "
					if echo ${it} | grep -q '@'; then
						echo "${it} -tls-host-verify" | sed 's+@+ -host-name +g'
					else
						echo -n ${it}
						dname=$(echo ${it} | sed 's+.*//++g; s+/.*++g' | sed 's+@.*++g; s+:.*++g')
						if ! echo ${dname} | grep -q '[0-9]$'; then
							echo -n " -host-name ${dname}"
						fi
						echo " -tls-host-verify"
					fi
				done
			done
		)
	EOF

	start_instance /usr/bin/$NAME -p- -c "/var/etc/${NAME}.conf" -f

	# -------------------- enable_cn --------------------
	uci_bool_by_type $NAME enable_cn && {
		echo "user $user" >"/var/etc/${NAME}_cn.conf"
		uci_bool_by_type $NAME cache && cat <<-EOF >>"/var/etc/${NAME}_cn.conf"
			cache-size 2048
			cache-file /tmp/smartdns_cn.cache
			cache-checkpoint-time 600
			serve-expired yes
			prefetch-domain yes
		EOF

		cat <<-EOF >>"/var/etc/${NAME}_cn.conf"
			cache-persist $(uci_bool_by_type $NAME cache && echo 'yes' || echo 'no')
			bind 0.0.0.0:$((port + 1))$(uci_bool_by_type $NAME cache || echo ' -no-cache')
			bind-tcp 0.0.0.0:$((port + 1))$(uci_bool_by_type $NAME cache || echo ' -no-cache')

			rr-ttl-min 300
			max-reply-ip-num 4
			rr-ttl-reply-max 120
			expand-ptr-from-address yes
			response-mode $(uci_get_by_type $NAME response_mode)
			speed-check-mode $(uci_get_by_type $NAME speed_check_mode)
			$(
				for it in $(uci_get_by_type $NAME extra_rules | sed "s+ +_+g; s+'_'+ +g; s+'++g"); do
					echo "domain-rules $it" | sed 's+_+ +g'
				done
			)

			dualstack-ip-selection $(uci_bool_by_type $NAME ipv6 && echo yes || echo no)
			force-AAAA-SOA $(uci_bool_by_type $NAME ipv6 && echo no || echo yes)
			force-qtype-SOA 65

			log-level info
			log-file ${LOG_DIR}/${NAME}_cn.log
			log-size 256K
			log-num 3

			$(
				for cfg in address cname ignore_ip; do
					for it in $(uci_get_by_type $NAME $cfg); do
						echo "$cfg $it"
					done
					echo
				done
			)
			$(
				for it in $(uci_get_by_type $NAME bootstrap); do
					echo "server ${it} -bootstrap-dns"
					echo ${it} | grep -qE '^223\.' || {
						echo "server-tcp ${it} -bootstrap-dns"
					}
				done
			)

			server-tls 120.53.53.53:853 -host-name dot.pub -tls-host-verify
			server-tls dot.360.cn:853 -host-name dot.360.cn -tls-host-verify
			server-https https://1.12.12.12/dns-query -host-name doh.pub -tls-host-verify
			server-https https://223.5.5.5/dns-query -host-name dns.alidns.com -tls-host-verify
			server-https https://223.6.6.6/dns-query -host-name dns.alidns.com -tls-host-verify
			# server-https https://doh.360.cn/dns-query -host-name doh.360.cn -tls-host-verify
		EOF

		uci_bool_by_type $NAME enable_cdn_cn && {
			echo -e "\n# CN-CDN" >>"/var/etc/${NAME}_cn.conf"
			cat <<-EOF >>"/var/etc/${NAME}_cn.conf"
				server 202.141.162.123 -group cdn -exclude-default-group
				server-tcp 202.141.162.123 -group cdn -exclude-default-group
				server 202.141.176.93 -group cdn -exclude-default-group
				server-tcp 202.141.176.93 -group cdn -exclude-default-group
				server 61.132.163.68 -group cdn -exclude-default-group
				server-tcp 61.132.163.68 -group cdn -exclude-default-group
				server 202.102.213.68 -group cdn -exclude-default-group
				server-tcp 202.102.213.68 -group cdn -exclude-default-group
				server 118.118.118.118 -group cdn -exclude-default-group
				server-tcp 118.118.118.118 -group cdn -exclude-default-group

				domain-rules /360buyimg.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /aicdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /alicdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /bootcdn.net/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /douyincdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /douyinvod.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /elemecdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /momentcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /qcloudcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /qihucdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /qiniucdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /sogoucdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /taobaocdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /tmall.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /tbcdn.cn/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /tbcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /vpgcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /weibocdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /xmcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /xycdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /yecdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /qtlcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /mwcname.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /alikunlun.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /ks-cdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /zhimg.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /qpic.cn/ -nameserver cdn -speed-check-mode tcp:443,ping
			EOF
		}

		start_instance /usr/bin/$NAME -p- -c "/var/etc/${NAME}_cn.conf" -f
	}
	# -------------------- enable_cn --------------------
}

stop_service() {
	del_cron
	rm -f "/var/etc/${NAME}*.conf" "/etc/hotplug.d/iface/*${NAME}*"
}

add_cron() {
	sed -i "/${NAME}/d" $CRON_FILE
	echo "0    *    * * *  rm -f ${LOG_DIR}_healthcheck.log 2>&1" >>$CRON_FILE
	echo "*    *    * * * /etc/init.d/${NAME} healthcheck >> ${LOG_DIR}_healthcheck.log 2>&1" >>$CRON_FILE
	/etc/init.d/cron restart
}

del_cron() {
	grep -q "${NAME}" $CRON_FILE || return 0
	sed -i "/${NAME}/d" $CRON_FILE
	/etc/init.d/cron restart
}

add_hotplug() {
	cat <<EOF >"/etc/hotplug.d/iface/${START}-${NAME}"
#!/bin/sh /etc/rc.common

[ "V\$ACTION" = "Vifup" ] || exit 0

logger -t hotplug smartdns-reload

/etc/init.d/${NAME} restart

exit $?
EOF
	chmod a+x "/etc/hotplug.d/iface/${START}-${NAME}"
}

healthcheck() {
	uci_bool_by_type $NAME enable || {
		del_cron
		return 1
	}

	# init check
	LOGTIME=$(date "+%Y-%m-%d %H:%M:%S")
	grep 'pending' ${LOG_DIR}/${NAME}*.log | grep -qE 'failed.$' && {
		rm -rf ${LOG_DIR}
		echo "[${LOGTIME}] Problem-Init decteted, restarting ${NAME}..."
		/etc/init.d/${NAME} restart
		return 0
	}

	# smartdns check
	/usr/bin/pgrep -f ${NAME}.conf >/dev/null || {
		echo "[${LOGTIME}] Problem decteted, restarting ${NAME}..."
		/etc/init.d/${NAME} restart
		return 0
	}

	# smartdns_cn check
	uci_bool_by_type $NAME enable_cn && {
		/usr/bin/pgrep -f ${NAME}_cn.conf >/dev/null || {
			echo "[${LOGTIME}] Problem decteted, restarting ${NAME}..."
			/etc/init.d/${NAME} restart
			return 0
		}
	}

	# log.gz cleanup
	rm -f $(ls ${LOG_DIR}/*.gz 2>/dev/null | grep -v $(date +"%Y%m%d"))

	echo "[${LOGTIME}] ${NAME} No Problem."
}
